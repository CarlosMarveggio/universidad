/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

package Vista;

import Controlador.AlumnoData;
import Controlador.InscripcionData;
import Controlador.MateriaData;
import Modelo.Alumno;
import Modelo.Inscripcion;
import Modelo.Materia;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class FormNotas extends javax.swing.JInternalFrame {

    private AlumnoData alumnoData = new AlumnoData();
    private InscripcionData inscData = new InscripcionData();
    private MateriaData materiaData = new MateriaData();
    private DefaultTableModel modelo = new DefaultTableModel();
    
    
    public FormNotas() {
        initComponents();
        cargarAlumnos();
        armarCabecera();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblSelecionarAlm = new javax.swing.JLabel();
        cmbAlumnos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMateriasInscriptas = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitulo.setText("Cargar Notas");

        lblSelecionarAlm.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblSelecionarAlm.setText("Selecione un Alumno");

        cmbAlumnos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cmbAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlumnosActionPerformed(evt);
            }
        });

        tbMateriasInscriptas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbMateriasInscriptas);

        btnGuardar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(lblSelecionarAlm)
                        .addGap(102, 102, 102)
                        .addComponent(cmbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(lblTitulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(btnGuardar)
                        .addGap(120, 120, 120)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitulo)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelecionarAlm)
                    .addComponent(cmbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnSalir))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cmbAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlumnosActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        llenarTabla();
    }//GEN-LAST:event_cmbAlumnosActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        actualizarDatos();
    }//GEN-LAST:event_btnGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<Alumno> cmbAlumnos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSelecionarAlm;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tbMateriasInscriptas;
    // End of variables declaration//GEN-END:variables

    private void cargarAlumnos() {
        List<Alumno> alumnos = alumnoData.listarAlumnos();
        Alumno cero = new Alumno();
        cero.setApellido("Seleccione un alumno");
        cmbAlumnos.addItem(cero);
        for (Alumno alum : alumnos) {
            cmbAlumnos.addItem(alum);
        }
    }
    
    private void borrarFilas(){
        int filas = modelo.getRowCount()-1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
    
    private void armarCabecera() {
        ArrayList<Object> titulos = new ArrayList<>();
        titulos.add("codigo Materia");
        titulos.add("Nombre");
        titulos.add("Nota");
        for (Object titulo : titulos) {
            modelo.addColumn(titulo);
        }
        tbMateriasInscriptas.setModel(modelo);
    }
    
    public void llenarTabla(){
        Alumno alumnoSelecionado = (Alumno) cmbAlumnos.getSelectedItem();
        List<Inscripcion> inscripciones = inscData.buscarInscripcionesAlumno(alumnoSelecionado.getIdAlumno());
        for (Inscripcion insc : inscripciones) {
            modelo.addRow(new Object[]{insc.getMateria().getIdMateria(), insc.getMateria().getNombre(), insc.getNota()});
        }
    }
    
    public void actualizarDatos(){
        int filaSelecionada = tbMateriasInscriptas.getSelectedRow();
        float nota = Float.parseFloat(tbMateriasInscriptas.getValueAt(filaSelecionada, 2).toString()) ;
        if(nota<0 || nota>10){
            JOptionPane.showMessageDialog(this, "Nots incorrecta");
        }else{
            Alumno alumnoSeleccionado = (Alumno) cmbAlumnos.getSelectedItem();
            int idAlum = alumnoSeleccionado.getIdAlumno();
            int idMateria = Integer.parseInt(this.modelo.getValueAt(filaSelecionada,0).toString());
            inscData.modificarInscripcion(idAlum, idMateria, nota);
            borrarFilas();
            llenarTabla();
        }
    }
}